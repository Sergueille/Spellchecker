
french_words.txt: https://www.pallier.org/extra/liste.de.mots.francais.frgut.txt (no license)
english_words.txt: generated from http://app.aspell.net/create

- tried distance algorithm
    -> works well, quite fast ~1ms/word (in debug not tested in release), but not fast enough for 300k words...
        -> up to 30s for long words
    -> tried filtering words by computing minimum distance quickly, and if it's higher than previous words, drop the word 
        -> based on length difference
        -> based on quantity of letters 
        -> nice time improvement but not enough
            -> better for small words, seconds or less
            -> still around 20s for long words
    -> tried dropping computations is cost is higher that previous words, but breaks memoisation and no significant speed increase
    -> tried selecting the ~1000 best words with a coarse distance, then calculating exact distance
        -> not "correct" anymore, but if necessary can run on more than 1000 words
        -> seems correct with 2k
        -> time (release build):
            -> fast distances: 0.1s 
            -> 2k precise distances: 0.1s 


Fast distance algorithms:
- len: compare lengths (almost free)
- count: count occurrences of letters (100ms)
- pres: check presence of letters (50ms)
- comp: compare each character (??)
- pairs-count: check occurrences of pairs of letters (230ms)
- pairs-pres: check presence of pairs of letters (??)

+:      many
x-:     usually x, but can be less
x*:     same, but almost never happens
x/y:    or y

        len             count           pres            comp            pairs-count     pairs-pres  
ins:    1               1               0/1             +               3/2*            3-
del:    1               1               0/1             +               3/2*            3-
sub:    0               2               0/2             1               4               4-
tra:    0               0               0               2               6-              6-

weights for Len, Count, depending of Insertion cost, Substitution cost, Transposition cost

l = 6i - 3s - t
c = 3s - 2t
p = t

-> fast count: correct up to 4 times the same letters
    -> different bit count for letters (3 for most common, 2 for others)



-> now implemented combined fast distance
    -> works mush better (could almost replace original algorithm!), 500 words in buffer does the job, but it can be increased
    -> the bottleneck is now the pairs algorithm (200ms on 300k words), already tried some improvements, see code comments
        -> no recursive calls, can be ported on graphic cards (probably)



-> output of fast distance test:
For each proposition made by the slow algorithm (left to right), the position of it in the fast algorithm's rank (worse since beginning)     Worst of all since beginning
<payeur               0 (0)       1 (1)       2 (2)       3 (3)       14 (14)     9 (9)       12 (12)     21 (21)     51 (51)     83 (83)     83
paypeur              0 (0)       2 (2)       20 (20)     66 (66)     1 (14)      3 (9)       13 (13)     19 (21)     21 (51)     22 (83)     83
apyeui               27 (27)     1 (2)       51 (51)     181 (181)   19 (19)     20 (20)     23 (23)     25 (25)     28 (51)     32 (83)     181
ptdyur               31 (31)     29 (29)     65 (65)     209 (209)   213 (213)   223 (223)   227 (227)   766 (766)   771 (771)   945 (945)   945
poyeu                0 (31)      3 (29)      5 (65)      21 (209)    27 (213)    77 (223)    90 (227)    272 (766)   282 (771)   2304 (2304) 2304
désemprisonneriez    0 (31)      1 (29)      10 (65)     5 (209)     2 (213)     6 (223)     8 (227)     9 (766)     11 (771)    16 (2304)   2304
adésemprisonneriez   0 (31)      2 (29)      13 (65)     9 (209)     1 (213)     3 (223)     5 (227)     10 (766)    11 (771)    12 (2304)   2304
dséemprjisonneriez   0 (31)      1 (29)      7 (65)      14 (209)    10 (213)    3 (223)     5 (227)     13 (766)    15 (771)    2 (2304)    2304
désemprcironnerief   0 (31)      9 (29)      2 (65)      1 (209)     4 (213)     5 (223)     6 (227)     10 (766)    7 (771)     3 (2304)    2304
désemprisoanersvz    8 (31)      2 (29)      0 (65)      3 (209)     4 (213)     9 (223)     5 (227)     12 (766)    1 (771)     6 (2304)    2304
négatrice            0 (31)      1 (29)      7 (65)      62 (209)    3 (213)     8 (223)     16 (227)    95 (766)    15 (771)    29 (2304)   2304
néwatrice            0 (31)      15 (29)     2 (65)      6 (209)     7 (213)     17 (223)    11 (227)    1765 (1765) 117 (771)   120 (2304)  2304
nétgatriue           1 (31)      0 (29)      782 (782)   409 (409)   47 (213)    362 (362)   363 (363)   408 (1765)  786 (786)   1147 (2304) 2304
négsairce            3 (31)      34 (34)     213 (782)   263 (409)   3697 (3697) 7884 (7884) 60 (363)    992 (1765)  2119 (2119) 3771 (3771) 7884
népgraixce           7239 (7239) 1225 (1225) 11615 (11615) 15402 (15402) 777 (3697)  1082 (7884) 1276 (1276) 1570 (1765) 15384 (15384) 266 (3771)  15402
hypertrophiques      0 (7239)    1 (1225)    2 (11615)   3 (15402)   4 (3697)    5 (7884)    6 (1276)    9 (1765)    7 (15384)   13 (3771)   15402
hypertrophiqkues     0 (7239)    1 (1225)    2 (11615)   3 (15402)   4 (3697)    5 (7884)    7 (1276)    8 (1765)    11 (15384)  9 (3771)    15402
hpyretrophiques      0 (7239)    4 (1225)    41 (11615)  42 (15402)  47 (3697)   70 (7884)   92 (1276)   2 (1765)    14 (15384)  218 (3771)  15402
ypertropiques        1 (7239)    0 (1225)    2 (11615)   4 (15402)   6 (3697)    32 (7884)   3 (1276)    9 (1765)    17 (15384)  18 (3771)   15402
hydertrkphxque       0 (7239)    1 (1225)    3 (11615)   27 (15402)  38 (3697)   9 (7884)    4 (1276)    5 (1765)    10 (15384)  11 (3771)   15402
carroieraient        0 (7239)    1 (1225)    2 (11615)   3 (15402)   7 (3697)    10 (7884)   11 (1276)   13 (1765)   14 (15384)  15 (3771)   15402
acrroieraient        0 (7239)    3 (1225)    1 (11615)   37 (15402)  2 (3697)    4 (7884)    81 (1276)   19 (1765)   20 (15384)  27 (3771)   15402
arrojieraient        0 (7239)    5 (1225)    8 (11615)   7 (15402)   62 (3697)   279 (7884)  1 (1276)    9 (1765)    17 (15384)  18 (3771)   15402
rcroieraieqt         17 (7239)   20 (1225)   0 (11615)   1 (15402)   6 (3697)    41 (7884)   44 (1276)   58 (1765)   59 (15384)  368 (3771)  15402
carrioreeeint        110 (7239)  179 (1225)  249 (11615) 119 (15402) 790 (3697)  170 (7884)  776 (1276)  913 (1765)  2527 (15384) 120 (3771)  15402
égalisassent         0 (7239)    2 (1225)    1 (11615)   4 (15402)   8 (3697)    10 (7884)   13 (1276)   32 (1765)   3 (15384)   5 (3771)    15402
/* many lines skipped */
mgestros             0 (7239)    14 (4645)   182 (12307) 331 (15402) 18 (9385)   106 (11030) 329 (14582) 330 (14152) 26 (17146)  33 (10418)  17146
kmasetzios           4837 (7239) 10582 (10582) 6392 (12307) 10404 (15402) 106 (9385)  125 (11030) 229 (14582) 635 (14152) 649 (17146) 2145 (10418) 17146
	bastidon             0 (7239)    1 (10582)   4 (12307)   2 (15402)   3 (9385)    5 (11030)   8 (14582)   9 (14152)   147 (17146) 160 (10418) 17146
batstidon            1 (7239)    0 (10582)   37 (12307)  573 (15402) 22 (9385)   32 (11030)  36 (14582)  49 (14152)  315 (17146) 151 (10418) 17146
bastidovy            0 (7239)    1 (10582)   2 (12307)   3 (15402)   10 (9385)   14 (11030)  203 (14582) 1821 (14152) 7 (17146)   8 (10418)   17146
basutdiln            1236 (7239) 296 (10582) 422 (12307) 1385 (15402) 2267 (9385) 11306 (11306) 14634 (14634) 16976 (16976) 58 (17146)  69 (10418)  17146
astibob              2 (7239)    0 (10582)   25 (12307)  222 (15402) 751 (9385)  771 (11306) 3821 (14634) 7 (16976)   8 (17146)   9 (10418)   17146
fisc                 0 (7239)    1 (10582)   2 (12307)   115 (15402) 3 (9385)    48 (11306)  9 (14634)   36 (16976)  39 (17146)  49 (10418)  17146
fiisc                1 (7239)    6 (10582)   437 (12307) 439 (15402) 0 (9385)    2 (11306)   3 (14634)   7 (16976)   11 (17146)  39 (10418)  17146
fisk                 0 (7239)    2 (10582)   49 (12307)  7 (15402)   39 (9385)   44 (11306)  48 (14634)  50 (16976)  51 (17146)  52 (10418)  17146
fvxipc               12501 (12501) 17 (10582)  18 (12307)  19 (15402)  20 (9385)   170 (11306) 171 (14634) 172 (16976) 3796 (17146) 12482 (12482) 17146
lffbc                21 (12501)  34 (10582)  36 (12307)  554 (15402) 3497 (9385) 3498 (11306) 3499 (14634) 3521 (16976) 55 (17146)  8 (12482)   17146
savourerons          0 (12501)   1 (10582)   2 (12307)   5 (15402)   42 (9385)   3 (11306)   6 (14634)   7 (16976)   8 (17146)   20 (12482)  17146
saiourerons          0 (12501)   8 (10582)   19 (12307)  5 (15402)   6 (9385)    10 (11306)  11 (14634)  22 (16976)  25 (17146)  79 (12482)  17146
savurerons           0 (12501)   1 (10582)   2 (12307)   45 (15402)  46 (9385)   267 (11306) 3 (14634)   5 (16976)   12 (17146)  14 (12482)  17146
savourrocsn          0 (12501)   2 (10582)   5 (12307)   11 (15402)  17 (9385)   20 (11306)  44 (14634)  51 (16976)  87 (17146)  50 (12482)  17146
savouos              2 (12501)   226 (10582) 228 (12307) 0 (15402)   1 (9385)    3 (11306)   16 (14634)  17 (16976)  18 (17146)  19 (12482)  17146
ondulées             0 (12501)   1 (10582)   2 (12307)   3 (15402)   5 (9385)    12 (11306)  30 (14634)  40 (16976)  7 (17146)   8 (12482)   17146
londulées            0 (12501)   12 (10582)  13 (12307)  14 (15402)  1 (9385)    2 (11306)   3 (14634)   15 (16976)  307 (17146) 21 (12482)  17146
ondxulécs            4 (12501)   7 (10582)   13 (12307)  12 (15402)  8 (9385)    26 (11306)  24 (14634)  147 (16976) 148 (17146) 149 (12482) 17146
odauées              0 (12501)   1 (10582)   22 (12307)  84 (15402)  85 (9385)   87 (11306)  121 (14634) 88 (16976)  4 (17146)   39 (12482)  17146
ounlfées             24 (12501)  25 (10582)  108 (12307) 819 (15402) 11 (9385)   146 (11306) 149 (14634) 150 (16976) 151 (17146) 1965 (12482) 17146
denier               0 (12501)   1 (10582)   2 (12307)   30 (15402)  3 (9385)    6 (11306)   48 (14634)  49 (16976)  4 (17146)   5 (12482)   17146
dener                0 (12501)   8 (10582)   72 (12307)  1 (15402)   105 (9385)  107 (11306) 5 (14634)   16 (16976)  537 (17146) 27 (12482)  17146
denor                0 (12501)   15 (10582)  16 (12307)  10 (15402)  17 (9385)   46 (11306)  363 (14634) 372 (16976) 733 (17146) 734 (12482) 17146
endiez               3 (12501)   4 (10582)   5 (12307)   6 (15402)   7 (9385)    8 (11306)   12 (14634)  13 (16976)  14 (17146)  11 (12482)  17146
edngpr               3 (12501)   8 (10582)   41 (12307)  49 (15402)  52 (9385)   53 (11306)  54 (14634)  466 (16976) 1813 (17146) 9359 (12482) 17146
tambouille           0 (12501)   1 (10582)   2 (12307)   6 (15402)   113 (9385)  201 (11306) 10 (14634)  105 (16976) 164 (17146) 270 (12482) 17146
tambouill            0 (12501)   1 (10582)   7 (12307)   24 (15402)  25 (9385)   28 (11306)  213 (14634) 214 (16976) 215 (17146) 216 (12482) 17146
tamobuwille          1 (12501)   0 (10582)   238 (12307) 341 (15402) 2172 (9385) 2351 (11306) 239 (14634) 633 (16976) 2986 (17146) 3177 (12482) 17146
tambrzilli           1 (12501)   30 (10582)  57 (12307)  58 (15402)  59 (9385)   105 (11306) 708 (14634) 709 (16976) 710 (17146) 651 (12482) 17146
amboullx             5 (12501)   27 (10582)  28 (12307)  164 (15402) 168 (9385)  169 (11306) 15 (14634)  92 (16976)  0 (17146)   26 (12482)  17146
impatroniserons      0 (12501)   1 (10582)   2 (12307)   3 (15402)   7 (9385)    8 (11306)   11 (14634)  4 (16976)   6 (17146)   10 (12482)  17146
wmpatroniserons      0 (12501)   1 (10582)   2 (12307)   3 (15402)   8 (9385)    9 (11306)   12 (14634)  4 (16976)   7 (17146)   5 (12482)   17146
impatroqisrons       0 (12501)   1 (10582)   2 (12307)   12 (15402)  38 (9385)   3 (11306)   9 (14634)   15 (16976)  19 (17146)  4 (12482)   17146
nmpatroniseornk      0 (12501)   1 (10582)   7 (12307)   2 (15402)   8 (9385)    9 (11306)   11 (14634)  12 (16976)  14 (17146)  22 (12482)  17146
ipmvatroniserohs     0 (12501)   1 (10582)   2 (12307)   3 (15402)   5 (9385)    7 (11306)   9 (14634)   16 (16976)  155 (17146) 169 (12482) 17146
dépenaillées         0 (12501)   1 (10582)   2 (12307)   3 (15402)   6 (9385)    13 (11306)  22 (14634)  56 (16976)  5 (17146)   7 (12482)   17146
dépenaillées         0 (12501)   1 (10582)   2 (12307)   3 (15402)   6 (9385)    13 (11306)  22 (14634)  56 (16976)  5 (17146)   7 (12482)   17146
dépfenaillbées       0 (12501)   1 (10582)   2 (12307)   7 (15402)   10 (9385)   27 (11306)  39 (14634)  434 (16976) 13 (17146)  19 (12482)  17146
dépeaillékoes        0 (12501)   5 (10582)   14 (12307)  32 (15402)  43 (9385)   53 (11306)  262 (14634) 7 (16976)   46 (17146)  76 (12482)  17146
épdnaillée           3 (12501)   15 (10582)  17 (12307)  0 (15402)   4 (9385)    5 (11306)   7 (14634)   70 (16976)  107 (17146) 109 (12482) 17146
igloos               0 (12501)   1 (10582)   25 (12307)  36 (15402)  55 (9385)   56 (11306)  70 (14634)  1134 (16976) 79 (17146)  1103 (12482) 17146
igdoos               0 (12501)   29 (10582)  50 (12307)  279 (15402) 851 (9385)  41 (11306)  92 (14634)  95 (16976)  106 (17146) 107 (12482) 17146
ilhloos              0 (12501)   201 (10582) 571 (12307) 170 (15402) 200 (9385)  4 (11306)   5 (14634)   6 (16976)   7 (17146)   19 (12482)  17146
kglzs                37 (12501)  62 (10582)  38 (12307)  57 (15402)  60 (9385)   61 (11306)  909 (14634) 120 (16976) 382 (17146) 389 (12482) 17146
hpgolos              0 (12501)   1 (10582)   6 (12307)   10 (15402)  69 (9385)   7 (11306)   11 (14634)  113 (16976) 547 (17146) 548 (12482) 17146
survenaient          0 (12501)   1 (10582)   2 (12307)   36 (15402)  37 (9385)   3 (11306)   6 (14634)   10 (16976)  11 (17146)  12 (12482)  17146
survenaeint          0 (12501)   2 (10582)   19 (12307)  22 (15402)  23 (9385)   181 (11306) 182 (14634) 15 (16976)  24 (17146)  26 (12482)  17146
survdenaint          0 (12501)   24 (10582)  25 (12307)  186 (15402) 187 (9385)  188 (11306) 6 (14634)   30 (16976)  42 (17146)  46 (12482)  17146
surevnahint          20 (12501)  132 (10582) 1306 (12307) 232 (15402) 5 (9385)    11 (11306)  265 (14634) 9 (16976)   22 (17146)  24 (12482)  17146
survejnaient         0 (12501)   6 (10582)   7 (12307)   79 (15402)  3 (9385)    9 (11306)   10 (14634)  11 (16976)  13 (17146)  77 (12482)  17146
Proportions of words that were selected by the fast algorithm
1000                 0.9880239520958084   0.9840319361277445   0.9700598802395209   0.9660678642714571   0.9520958083832335   0.9481037924151696   0.936127744510978    0.9301397205588823   0.9181636726546906   0.9141716566866267   
2000                 0.9940119760479041   0.9940119760479041   0.9840319361277445   0.9780439121756487   0.9600798403193613   0.9680638722554891   0.9580838323353293   0.9600798403193613   0.9500998003992016   0.9520958083832335   
5000                 0.9960079840319361   0.998003992015968    0.9900199600798403   0.9920159680638723   0.9880239520958084   0.9800399201596807   0.9800399201596807   0.9740518962075848   0.9820359281437125   0.9780439121756487 

-> tested with file generated by generate_test_wards.txt, which generates 100 words with 0, 1 ... then 4 errors.
-> the slow method is only executed on the best 20k words selected by the fast algorithm 
-> most of the time the first is 0 (this means the slow ans fast predictions are the same)
-> most of the time 1000 words in fast algorithm is largely sufficient, however in rare cases, up to 10k words are needed
    -> happens with strange words with 4 errors, here is a list of words that have gone wrong
        - négatrice|népgraixce
        - maestros|kmasetzios
        - hennissez|heenvnsse
        - croque-monsieur|rcouemmonsiceur